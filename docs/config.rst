Configuration Options
=====================

Do not make changes to the distributed configuration file.  Rather, include the distributed configuration file in your own configuration file and overwrite the items that you would like to.  This eases the upgrade path when defaults are changed and new features are added.

api_version
^^^^^^^^^^^

.. code-block:: php
    
    'api_version' => '0.1.0.empty-dumpty'

The API version string allowing a userbase to keep track of API changes.  It is definied as major.minor.maintenance[.build] where:

:Major: Increase for each changes that may affect or not be compatible with a previous version of the API. Bumping the major generally imply a fresh new production deployment so the previous version can (and should) be left intact for those that depend upon it.
:Minor: Increases each time there are new addition e.g. a new resource.
:Maintenance: Increases each time there are modifications to existing resource entities and which don't break exisiting definitions.
:Build: Can be use for arbitrary naming such as 0.1.0.beta, 0.1.1.rc3 (third release candidate), 0.1.2.smoking-puma, 0.1.30.testing

api_realm
^^^^^^^^^

.. code-block:: php
    
    'api_realm' => 'api.example.com'

The API realm name. Used in few places, most notably as part of the version string in the header response. It is also used as part of some authentication mechanisms e.g. Basic and Digest. Should always be a generic/static string and cannot be used to define server instance. In other words, DO NOT use $_SERVER['SERVER_NAME'] to set this option!

output_rootNode
^^^^^^^^^^^^^^^

.. code-block:: php
    
    'output_rootNode' => 'apix'

Define the name of the data output topmost node which contains the various nodes generated by the response output. The signature and debug nodes (may) also live within that node if enable further down below.


input_formats
^^^^^^^^^^^^^

.. code-block:: php
    
    'input_formats' => array('post', 'json', 'xml')

The array of available data formats for input representation:

:POST: Body post data
:JSON: Light text-based open standard designed for human-readable data interchange.
:XML: Generic and standard markup language as defined by XML 1.0 schema.

Note that at this stage only UTF-8 is supported.

routing
^^^^^^^

The routing value is an array with the following keys:



path_prefix
"""""""""""

.. code-block:: php
    
    'path_prefix' => '/^(\/\w+\.\w+)?(\/api)?\/v(\d+)/i'

The regular expression representing the path prefix from the Request-URI. Allows the server to retrieve the path without the route prefix, handling variation in version numbering, Apache's mod_rewrite, nginx location definitions, etc...

Should match '/index.php/api/v1/entity/name?whatver...' which using mod_rewrite could then translate into 'http://www.example.com/v1/entity/name?whatver...'.

formats
"""""""

.. code-block:: php
    
    'formats' => array('json', 'xml', 'jsonp', 'html', 'php')

The array of available data formats for output representation:

:JSON: Light text-based open standard designed for human-readable data interchange.
:XML: Generic and standard markup language as defined by the XML 1.0 specification. Again, other schema could be implemented if required.
:JSONP: Output JSON embeded within a javascript callback. Javascript clients can set the callback name using the GET/POST variable named 'callback' or default to the 'output_rootNode' value set above.
:HTML: Output an HTML bulleted list.
:PHP: Does not currently serialize the data as one would expect but just dumps the output array for now.

default_format
""""""""""""""

.. code-block:: php
    
    'default_format' => 'json'

Set the defaut output format to either JSON or XML. Note that JSON encoding is by definition UTF-8 only. If a specific encoding is required then XML should be used as the default format. In most case, JSON is favored.

http_accept
"""""""""""

.. code-block:: php
    
    'http_accept' => true

Whether to enable the negotiation of output format from an HTTP Accept header. This is the expected and most RESTful way to set the output format.  See `RFC 2616 <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html>`_ for more information.

controller_ext
""""""""""""""

.. code-block:: php
    
    'controller_ext' => true

Whether to allow the output format to be set from the Request-URI using a file extension such as '/controller.json/id'. This is handy and common practice but fairly un-RESTful. The extension overrides the http_accept negotiation.

format_override
"""""""""""""""

.. code-block:: php
    
    'format_override' => isset($_REQUEST['_format']) ? $_REQUEST['_format'] : false

Forces the output format to the string provided and overrides the format negotiation process. Set to false to disable. Can be use to set the format from a request parameter, or any other arbitrary methods, etc... Using REQUEST is considered un-RESTful but also can be handy in many cases e.g. forms handling.

resources
^^^^^^^^^

A resource definition is made of a 'Route path' (with or without named variable) pointing to a controller which may be defined as closure/lambda definitions (Ã  la Sinatra) allowing fast prototyping, class definitions allowing for a tradition Model + Controller layout, or a redirect.

Class Definitions
"""""""""""""""""

.. code-block:: php

    $config['resources'] += array(
        '/hello/:name' => array(
            'controller' => array(
                'name' =>   'MyControllers\Hello', // a namespace\classname as a string
                'args' =>   array('classArg1'=>'value1', 'classArg2'=>'string') // a __constructor variables as an array or null.
            )
        ),
        ...
    )

The default values to the 'resources' key set up API documentation links and should not be overwritten.

Redirects
"""""""""
.. code-block:: php

    $config['resources'] += array(
        '/redirect/me' => array(
            'redirect' => '/hello/world'
        ),
        ...
    )

Perform a redirect on the path '/redirect/me' to 'hello/world'.

services
^^^^^^^^

The service defintions array is mostly used as a convenient container to define some generic/shared code.  For example, Authorization adapters and session data can be stored in the services array.  These items can later be retrieved using Apix\\Service::get().

An example Authentication service might look something like this:

.. code-block:: php
    
    // $c is the current $configuration array
    'auth' => function() use ($c) {
	// Example implementing Plugin\Auth\Basic
	// The Basic Authentification mechanism is generally used with SSL.
	$adapter = new Apix\Plugin\Auth\Basic($c['api_realm']);
	$adapter->setToken(function(array $current) use ($c) {
	    $users = array(
	        array('username'=>'example', 'password'=>'mypassword', group=>'admin', 'realm'=>'www.example.com')
	    );
	    foreach ($users as $user) {
		if ($current['username'] == $user['username'] && $current['password'] == $user['password']) {
		    Service::get('session', $user);
		    return true;
		}
	    }
	    return false;
	});
        return $adapter;
    },
    
    // create a session object that we can use in the auth service
    'session' => function($user) {
        // Set that way solely to avoid duplicating code in auth_example.
        $session = new Session($user['username'], $user['group']);
        // Overwrite this service container, with the new Session object!
        // Apix\Plugin\Auth expects this session container to hold Apix\Session.
        Service::set('session', $session);
    }

In this example, we have both a *session* service and an *auth* service.  The *auth* service makes use of the *session* service, as the session is used in other code in APIx.  Another service might have been created to store or dynamically retrieve a users array.

plugins
^^^^^^^

Please see the :doc:`Plugin documentation <apix/plugin>` for more information on available event hooks and interface for Plugins.

Currently available plugins include the following:

Apix\Plugin\OutputSign
""""""""""""""""""""""

Add the entity signature as part of the response body.

Apix\Plugin\OutputDebug
"""""""""""""""""""""""

Add some debugging information within the response body.  This should be set to false in production and does have an impact on cachability.

Apix\Plugin\Tidy
""""""""""""""""

Validates, corrects, and pretty-prints XML and HTML outputs.  Various options are available.  See the `Tidy quickref <http://tidy.sourceforge.net/docs/quickref.html>`_ for more information on available options.

Apix\Plugin\Auth
""""""""""""""""

Authentication plugin.  This is enabled through method/closure annotation.  For example:

.. code-block:: php

    /**
     * My Method Annotation
     * @api_auth  groups=admin,default  users=usera,userb
     **/
    public function onRead() {
        ...
    }





